<!DOCTYPE html>
<html>

  <head>
    <title>LOGOUT</title>
    <meta charset="UTF-8">
    <meta content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=10.0, user-scalable=yes" name="viewport">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js" type="text/javascript"></script>
    <script type="text/javascript">
      var UA;
      var isShake = false;
      var width = 1150;
      var height = 750;
      var x;
      var y;
      var z;
      var alpha;
      var beta;
      var gamma;
      var posX = width / 2;
      var posY = height / 2;
      var angle = 0;
      window.addEventListener('load', function() {

        UA = navigator.userAgent;
        var isMenuShow = false;

        $(".bunObj").click(function() {
          if (isMenuShow) {
            $(".main").animate({
              'margin-left': '-=150px'
            }, 300);
            $(".bun").animate({
              'opacity': '1'
            }, 200);
            $(".bun").show(150);
            $(".cross").animate({
              'opacity': '0'
            }, 100);
            $(".cross").hide(150);
            isMenuShow = false;
          } else {
            $(".main").animate({
              'margin-left': '+=150px'
            }, 300);
            $(".bun").animate({
              'opacity': '0'
            }, 100);
            $(".bun").hide(150);
            $(".cross").animate({
              'opacity': '1'
            }, 200);
            $(".cross").show(100);
            isMenuShow = true;
          }
        });
        update();
      }, false);

      /*--------------------------canvas-------------------------------*/

      function update() {
        requestAnimationFrame(update);

        /*閾値を越えたら傾けた角度の分動く*/
        if (Math.abs(30 - beta) > 10) {
          posY += (30 - beta) * 0.1;
        }
        if (Math.abs(x) > 1.0) {
          posX += x;
        }
        /*枠の外には出ないようにする*/
        var limit = 30;
        if (posX >= width - limit) {
          posX = width - limit;
        }
        if (posX <= limit) {
          posX = limit;
        }
        if (posY > height - limit) {
          posY = height - limit;
        }
        if (posY < limit) {
          posY = limit;
        }
        posX = Math.floor(posX);
        posY = Math.floor(posY);

        draw();
        isShake = false;
      }

      function draw() {
        var image = "<%= image %>";
        var color = "<%= color %>";
        var type = "<%= type %>";
        var iconX = 200 / 2;
        var iconY = 240 / 2;
        var size = 100;
        var canvas = document.getElementById('canvas');
        var ctx = canvas.getContext('2d');
        ctx.save();
        ctx.shadowColor = color; //指定した色
        ctx.shadowBlur = 10; //シャドウの強さ
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;

        ctx.fillStyle = "#000";
        ctx.fillRect(0, 0, 500, 500);

        ctx.shadowBlur = 10; //シャドウを付ける
        ctx.fillStyle = color; //指定した色

        drawUser(type, ctx, iconX, iconY, size); //ドット描写

        /*iconX,iconYに画像を表示*/
        ctx.fillRect(iconX - size / 2 - 1, iconY - size / 2 - 1, size + 2, size + 2);
        ctx.shadowBlur = 0;
        var img = new Image();
        img.src = image;
        ctx.drawImage(img, iconX - size / 2, iconY - size / 2, size, size);
      }

      function drawUser(type, ctx, iconX, iconY, size) {
        DD = new Date(); //時間取得
        var seconds = DD.getSeconds();
        if (seconds % 2 == 0) {
          pose = -1; //ポーズ切り替え
        } else {
          pose = 1;
        }
        if (type == "typeA") {
          if (pose == 1) { //2
            ctx.fillRect(iconX - size / 6, iconY - size * 2 / 3, size / 6, size / 6); //アンテナ
            ctx.fillRect(iconX, iconY - size * 5 / 6, size / 6, size / 6);
            ctx.fillRect(iconX - size / 6, iconY - size, size / 6, size / 6);

            ctx.fillRect(iconX - size * 2 / 3, iconY, size / 6, size / 3); //左腕
            ctx.fillRect(iconX - size * 2 / 3, iconY + size / 2, size / 6, size / 6);
            ctx.fillRect(iconX - size / 2, iconY + size * 2 / 3, size / 6, size / 6);

            ctx.fillRect(iconX + size / 2, iconY, size / 6, size / 3); //右腕
            ctx.fillRect(iconX + size / 2, iconY + size / 2, size / 6, size / 6);
            ctx.fillRect(iconX + size / 3, iconY + size * 2 / 3, size / 6, size / 6);
          } else { //5
            ctx.fillRect(iconX - size / 6, iconY - size * 2 / 3, size / 6, size / 6); //アンテナ
            ctx.fillRect(iconX, iconY - size * 5 / 6, size / 6, size / 6);
            ctx.fillRect(iconX - size / 6, iconY - size, size / 6, size / 6);

            ctx.fillRect(iconX - size * 2 / 3, iconY, size / 6, size / 3); //左腕
            ctx.fillRect(iconX - size * 5 / 6, iconY + size / 6, size / 6, size / 2);
            ctx.fillRect(iconX - size * 2 / 3, iconY + size * 2 / 3, size / 6, size / 6);

            ctx.fillRect(iconX + size / 2, iconY, size / 6, size / 3); //右腕
            ctx.fillRect(iconX + size * 2 / 3, iconY + size / 6, size / 6, size / 2);
            ctx.fillRect(iconX + size / 2, iconY + size * 2 / 3, size / 6, size / 6);
          }
        }
        if (type == "typeB") {
          if (pose == 1) { //1
            ctx.fillRect(iconX - size * 5 / 6, iconY - size / 3, size / 6, size / 3); //左腕
            ctx.fillRect(iconX - size * 2 / 3, iconY - size / 6, size / 6, size / 2);

            ctx.fillRect(iconX + size * 2 / 3, iconY - size / 3, size / 6, size / 3); //右腕
            ctx.fillRect(iconX + size / 2, iconY - size / 6, size / 6, size / 2);

            ctx.fillRect(iconX - size / 3, iconY + size / 2, size / 6, size / 3); //足
            ctx.fillRect(iconX + size / 6, iconY + size / 2, size / 6, size / 3);
          } else { //12
            ctx.fillRect(iconX - size * 5 / 6, iconY - size / 3, size / 6, size / 3); //左腕
            ctx.fillRect(iconX - size * 2 / 3, iconY - size / 6, size / 6, size / 3);

            ctx.fillRect(iconX + size * 2 / 3, iconY - size / 3, size / 6, size / 3); //右腕
            ctx.fillRect(iconX + size / 2, iconY - size / 6, size / 6, size / 3);

            ctx.fillRect(iconX - size * 2 / 3, iconY + size / 2, size / 6, size / 6); //足
            ctx.fillRect(iconX + size / 2, iconY + size / 2, size / 6, size / 6);
          }
        }
        if (type == "typeC") {
          if (pose == 1) { //3
            ctx.fillRect(iconX, iconY - size * 5 / 6, size / 6, size / 3); //アンテナ
            ctx.fillRect(iconX - size / 6, iconY - size * 2 / 3, size / 6, size / 6);

            ctx.fillRect(iconX - size / 2, iconY + size / 2, size / 6, size / 3); //左足
            ctx.fillRect(iconX - size * 2 / 3, iconY + size * 5 / 6, size / 6, size / 6);

            ctx.fillRect(iconX + size / 3, iconY + size / 2, size / 6, size / 3); //右足
            ctx.fillRect(iconX + size / 2, iconY + size * 5 / 6, size / 6, size / 6);
          } else {
            ctx.fillRect(iconX - size / 6, iconY - size * 5 / 6, size / 6, size / 3); //アンテナ
            ctx.fillRect(iconX, iconY - size * 2 / 3, size / 6, size / 6);

            ctx.fillRect(iconX - size / 2, iconY + size / 2, size / 6, size / 6); //左足
            ctx.fillRect(iconX - size / 3, iconY + size * 2 / 3, size / 6, size / 6);
            ctx.fillRect(iconX - size / 6, iconY + size * 5 / 6, size / 6, size / 6);

            ctx.fillRect(iconX + size / 3, iconY + size / 2, size / 6, size / 6); //右足
            ctx.fillRect(iconX + size / 6, iconY + size * 2 / 3, size / 6, size / 6);
            ctx.fillRect(iconX, iconY + size * 5 / 6, size / 6, size / 6);
          }
        }
        if (type == "typeD") {
          if (pose == 1) { //6
            ctx.fillRect(iconX - size / 6, iconY - size * 2 / 3, size / 6, size / 6); //アンテナ
            ctx.fillRect(iconX, iconY - size * 5 / 6, size / 6, size / 6);
            ctx.fillRect(iconX - size / 6, iconY - size, size / 6, size / 6);

            ctx.fillRect(iconX, iconY + size / 2, size / 6, size / 6); //アンテナ
            ctx.fillRect(iconX - size / 6, iconY + size * 2 / 3, size / 6, size / 6);
            ctx.fillRect(iconX, iconY + size * 5 / 6, size / 6, size / 6);

            ctx.fillRect(iconX - size * 2 / 3, iconY - size / 3, size / 6, size * 2 / 3); //端
            ctx.fillRect(iconX + size / 2, iconY - size / 3, size / 6, size * 2 / 3);
          } else {
            ctx.fillRect(iconX, iconY - size * 2 / 3, size / 6, size / 6); //アンテナ
            ctx.fillRect(iconX - size / 6, iconY - size * 5 / 6, size / 6, size / 6);
            ctx.fillRect(iconX, iconY - size, size / 6, size / 6);

            ctx.fillRect(iconX - size / 6, iconY + size / 2, size / 6, size / 6); //アンテナ
            ctx.fillRect(iconX, iconY + size * 2 / 3, size / 6, size / 6);
            ctx.fillRect(iconX - size / 6, iconY + size * 5 / 6, size / 6, size / 6);

            ctx.fillRect(iconX - size * 2 / 3, iconY - size / 3, size / 6, size * 2 / 3); //端
            ctx.fillRect(iconX + size / 2, iconY - size / 3, size / 6, size * 2 / 3);
          }
        }
        if (type == "typeE") {
          if (pose == 1) { //9
            ctx.fillRect(iconX - size / 6, iconY - size * 5 / 6, size / 3, size / 6); //頭
            ctx.fillRect(iconX - size / 3, iconY - size * 2 / 3, size * 2 / 3, size / 6);

            ctx.fillRect(iconX - size * 2 / 3, iconY + size / 6, size / 6, size / 2); //左足
            ctx.fillRect(iconX - size * 5 / 6, iconY + size * 2 / 3, size / 6, size / 6);

            ctx.fillRect(iconX + size / 2, iconY + size / 6, size / 6, size / 2); //右足
            ctx.fillRect(iconX + size * 2 / 3, iconY + size * 2 / 3, size / 6, size / 6);
          } else {
            ctx.fillRect(iconX - size / 6, iconY - size, size / 6, size / 6); //頭
            ctx.fillRect(iconX - size / 6, iconY - size * 5 / 6, size / 3, size / 6);
            ctx.fillRect(iconX - size / 3, iconY - size * 2 / 3, size * 2 / 3, size / 6);

            ctx.fillRect(iconX - size / 2, iconY + size * 2 / 3, size / 6, size / 6); //足
            ctx.fillRect(iconX - size / 3, iconY + size / 2, size / 6, size / 6);
            ctx.fillRect(iconX - size / 6, iconY + size / 2, size / 6, size / 3);
            ctx.fillRect(iconX + size / 6, iconY + size / 2, size / 6, size / 6);
            ctx.fillRect(iconX + size / 3, iconY + size * 2 / 3, size / 6, size / 6);
          }
        }
        if (type == "typeF") {
          if (pose == 1) { //10
            ctx.fillRect(iconX - size / 2, iconY - size * 5 / 6, size / 6, size / 6); //耳
            ctx.fillRect(iconX - size / 3, iconY - size * 2 / 3, size / 6, size / 6);
            ctx.fillRect(iconX + size / 3, iconY - size * 5 / 6, size / 6, size / 6);
            ctx.fillRect(iconX + size / 6, iconY - size * 2 / 3, size / 6, size / 6);

            ctx.fillRect(iconX - size * 5 / 6, iconY + size * 2 / 3, size / 6, size / 6); //足
            ctx.fillRect(iconX - size * 2 / 3, iconY + size / 2, size * 4 / 3, size / 6);
            ctx.fillRect(iconX + size * 2 / 3, iconY + size * 2 / 3, size / 6, size / 6);
          } else {
            ctx.fillRect(iconX - size / 6, iconY - size, size / 6, size / 6); //アンテナ
            ctx.fillRect(iconX, iconY - size * 5 / 6, size / 6, size / 3);

            ctx.fillRect(iconX - size * 5 / 6, iconY + size / 2, size / 6, size / 6); //足
            ctx.fillRect(iconX - size * 2 / 3, iconY + size * 2 / 3, size / 3, size / 6);
            ctx.fillRect(iconX - size / 3, iconY + size / 2, size * 2 / 3, size / 6);
            ctx.fillRect(iconX + size / 3, iconY + size * 2 / 3, size / 3, size / 6);
            ctx.fillRect(iconX + size * 2 / 3, iconY + size / 2, size / 6, size / 6);
          }
        }
        if (type == "typeG") {
          if (pose == 1) { //7
            ctx.fillRect(iconX - size / 6, iconY - size * 5 / 6, size / 6, size / 6);
            ctx.fillRect(iconX, iconY - size * 2 / 3, size / 3, size / 6);
            ctx.fillRect(iconX + size * 2 / 3, iconY - size / 6, size / 6, size / 6);
            ctx.fillRect(iconX + size / 2, iconY, size / 6, size / 3);
            ctx.fillRect(iconX, iconY + size * 2 / 3, size / 6, size / 6);
            ctx.fillRect(iconX - size / 3, iconY + size / 2, size / 3, size / 6);
            ctx.fillRect(iconX - size * 5 / 6, iconY, size / 6, size / 6);
            ctx.fillRect(iconX - size * 2 / 3, iconY - size / 3, size / 6, size / 3);
          } else {
            ctx.fillRect(iconX - size / 2, iconY - size * 5 / 6, size / 6, size / 6);
            ctx.fillRect(iconX - size / 3, iconY - size * 2 / 3, size / 3, size / 6);
            ctx.fillRect(iconX + size * 2 / 3, iconY - size / 2, size / 6, size / 6);
            ctx.fillRect(iconX + size / 2, iconY - size / 3, size / 6, size / 3);
            ctx.fillRect(iconX + size / 3, iconY + size * 2 / 3, size / 6, size / 6);
            ctx.fillRect(iconX, iconY + size / 2, size / 3, size / 6);
            ctx.fillRect(iconX - size * 5 / 6, iconY + size / 3, size / 6, size / 6);
            ctx.fillRect(iconX - size * 2 / 3, iconY, size / 6, size / 3);
          }
        }
      }
    </script>
    <link href="../public/stylesheets/phone.css" rel="stylesheet" type="text/css">
  </head>

  <body>
    <!-- menubar -->
    <div class="menubar">
      <nav class="child">
        <ul>
          <li>
            <form action="/phoneMain" method="get">
              <input class="menuHOME" type="submit" value="HOME">
            </form>
          </li>
          <li>
            <form action="change.php" method="get">
              <input name=id type="hidden" value="<%= id %>">
              <input name=image type="hidden" value="<%= image %>">
              <input name=color type="hidden" value="<%= color %>">
              <input name=type type="hidden" value="<%= type %>">
              <input name=user type="hidden" value="<%= user %>">
              <input class="menuCHANGE" type="submit" value="CHANGE">
            </form>
          </li>
          <li>
            <form action="/about" method="get">
              <input class="menuABOUT" type="submit" value="ABOUT">
            </form>
          </li>
          <li>
            <form action="/logout" method="get">
              <input class="menuLOGOUT" type="submit" value="LOGOUT">
            </form>
          </li>
        </ul>
      </nav>
    </div>
    <!-- main -->
    <div class="main">
      <div class="bunObj">
        <div class="bun top"></div>
        <div class="bun middle"></div>
        <div class="bun bottom"></div>
        <div class="cross right"></div>
        <div class="cross left"></div>
      </div>
      <div class="content">
        <canvas height="240" id="canvas" width="200"></canvas>
        <p>お疲れ様でした</p>
        <span class="user">
          <%= user %>
        </span>
        <span>さん</span>
        <form action="/sessionDelete" method="get">
          <input id="logout" type="submit" value="Logout">
        </form>
      </div>
    </body>

  </html>
